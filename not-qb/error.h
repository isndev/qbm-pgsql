/**
 *  @author zmij
 *  from project: https://github.com/zmij/pg_async.git
 */

/**
 * @file error.h
 * @brief PostgreSQL error handling classes
 * 
 * This file defines the exception classes used by the PostgreSQL client
 * to handle various error conditions, including:
 * 
 * - Database connection errors
 * - Query execution errors
 * - Client-side errors (e.g., in callbacks)
 * - NULL value access errors
 * 
 * Each exception class provides specific information about the error,
 * including PostgreSQL-specific details like error codes and severity.
 */

#ifndef QBM_PGSQL_NOT_QB_ERROR_H
#define QBM_PGSQL_NOT_QB_ERROR_H

#include "sqlstates.h"
#include <stdexcept>

namespace qb {
namespace pg {
namespace error {

/**
 * @brief Base class for exceptions generated by the library
 * 
 * Serves as the common base class for all PostgreSQL-related exceptions.
 * Adds PostgreSQL-specific error information to standard exceptions.
 */
class db_error : public std::runtime_error {
public:
    /**
     * @brief Constructs a basic database error
     * 
     * @param what_arg Error message
     */
    explicit db_error(std::string const &what_arg);
    
    /**
     * @brief Constructs a basic database error
     * 
     * @param what_arg Error message
     */
    explicit db_error(char const *what_arg);
    
    /**
     * @brief Constructs a detailed database error
     * 
     * @param message Main error message
     * @param severity PostgreSQL error severity
     * @param code PostgreSQL error code
     * @param detail Additional error details
     */
    db_error(std::string const &message, std::string severity, std::string code,
             std::string detail);
             
    std::string severity;  ///< PostgreSQL error severity level (ERROR, FATAL, etc.)
    std::string code;      ///< PostgreSQL error code string
    std::string detail;    ///< Detailed error description
    sqlstate::code sqlstate; ///< Structured SQL state code
};

/**
 * @brief Connection with the database server failure
 * 
 * Thrown when a connection cannot be established or is lost.
 * Includes network and authentication failures.
 */
class connection_error : public db_error {
public:
    /**
     * @brief Constructs a connection error
     * 
     * @param what_arg Error message
     */
    explicit connection_error(std::string const &);
    
    /**
     * @brief Constructs a connection error
     * 
     * @param what_arg Error message
     */
    explicit connection_error(char const *what_arg);
};

/**
 * @brief An error generated by the PostgreSQL server when executing a query
 * 
 * Thrown when the database server reports an error during query execution,
 * such as syntax errors, constraint violations, or permission issues.
 */
class query_error : public db_error {
public:
    /**
     * @brief Constructs a query error
     * 
     * @param what_arg Error message
     */
    explicit query_error(std::string const &);
    
    /**
     * @brief Constructs a query error
     * 
     * @param what_arg Error message
     */
    explicit query_error(char const *what_arg);

    /**
     * @brief Constructs a detailed query error
     * 
     * @param message Main error message
     * @param severity PostgreSQL error severity
     * @param code PostgreSQL error code
     * @param detail Additional error details
     */
    query_error(std::string const &message, std::string severity, std::string code,
                std::string detail);
};

/**
 * @brief Error for operations on a closed transaction
 * 
 * Thrown when attempting to execute a query on a transaction
 * that has already been committed or rolled back.
 */
class transaction_closed : public query_error {
public:
    /**
     * @brief Constructs a transaction closed error
     */
    transaction_closed()
        : query_error("Transaction already closed") {}
};

/**
 * @brief Exception caught in a callback function
 * 
 * Wraps exceptions that occur in user-provided callback functions.
 * Allows the library to handle user code errors gracefully.
 */
class client_error : public db_error {
public:
    /**
     * @brief Constructs a client error from a string
     * 
     * @param what_arg Error message
     */
    explicit client_error(std::string const &);
    
    /**
     * @brief Constructs a client error from a C string
     * 
     * @param what_arg Error message
     */
    explicit client_error(char const *);
    
    /**
     * @brief Constructs a client error from another exception
     * 
     * @param e Original exception
     */
    explicit client_error(std::exception const &);
};

/**
 * @brief Attempt to extract a value from a NULL field
 * 
 * Thrown when trying to access the value of a field that contains NULL,
 * without properly checking if the field is NULL first.
 */
class value_is_null : public db_error {
public:
    /**
     * @brief Constructs a NULL value error
     * 
     * @param field_name Name of the field that contains NULL
     */
    explicit value_is_null(std::string const &field_name);
};

} // namespace error
} // namespace pg
} // namespace qb

#endif /* QBM_PGSQL_NOT_QB_ERROR_H */
