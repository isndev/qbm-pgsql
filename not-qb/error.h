/**
 *  @author zmij
 *  from project: https://github.com/zmij/pg_async.git
 */

#ifndef QBM_PGSQL_NOT_QB_ERROR_H
#define QBM_PGSQL_NOT_QB_ERROR_H

#include "sqlstates.h"
#include <stdexcept>

namespace qb {
namespace pg {
namespace error {

/**
 * @brief Base class for exceptions generated by the library
 */
class db_error : public std::runtime_error {
public:
    explicit db_error(std::string const &what_arg);
    explicit db_error(char const *what_arg);
    db_error(std::string const &message, std::string severity, std::string code,
             std::string detail);
    std::string severity;
    std::string code;
    std::string detail;
    sqlstate::code sqlstate;
};

/**
 * @brief Connection with the database server failure.
 * Includes network and authentication failures.
 */
class connection_error : public db_error {
public:
    explicit connection_error(std::string const &);
    explicit connection_error(char const *what_arg);
};

/**
 * @brief An error generated by the PostgreSQL server when executing a query.
 */
class query_error : public db_error {
public:
    explicit query_error(std::string const &);
    explicit query_error(char const *what_arg);

    query_error(std::string const &message, std::string severity, std::string code,
                std::string detail);
};

class transaction_closed : public query_error {
public:
    transaction_closed()
        : query_error("Transaction already closed") {}
};

/**
 * @brief An exception was caught in a callback.
 * @see @ref errors
 * @see @ref callbacks
 */
class client_error : public db_error {
public:
    explicit client_error(std::string const &);
    explicit client_error(char const *);
    explicit client_error(std::exception const &);
};

/**
 * @brief An attempt to extract a value from a null field was made.
 */
class value_is_null : public db_error {
public:
    explicit value_is_null(std::string const &field_name);
};

} // namespace error
} // namespace pg
} // namespace qb

#endif /* QBM_PGSQL_NOT_QB_ERROR_H */
